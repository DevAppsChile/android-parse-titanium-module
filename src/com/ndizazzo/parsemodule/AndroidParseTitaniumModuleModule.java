/**
* This file was auto-generated by the Titanium Module SDK helper for Android
* Appcelerator Titanium Mobile
* Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
* Licensed under the terms of the Apache Public License
* Please see the LICENSE included with this distribution for details.
*
*/
package com.ndizazzo.parsemodule;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.parse.Parse;
import com.parse.ParseObject;
import com.parse.FindCallback;
import com.parse.SaveCallback;
import com.parse.DeleteCallback;
import com.parse.ParseQuery;
import com.parse.ParseException;

import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollFunction;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;

@Kroll.module(name="AndroidParseTitaniumModule", id="com.ndizazzo.parsemodule")
public class AndroidParseTitaniumModuleModule extends KrollModule {
	ParseSingleton parseSingleton = null;

	// Standard Debugging variables
	private static final String TAG = "AndroidParseTitaniumModule";

	public AndroidParseTitaniumModuleModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
	}

	@Kroll.method
	public void initParse(HashMap initOpts) {

		// Store a reference to the parse singleton now that the app is ready
		parseSingleton = ParseSingleton.Instance();

		if (initOpts != null) {
			Log.d(TAG, "initParse called with parameters " + initOpts.toString());

			String appId = null;
			String clientKey = null;

			if (initOpts.containsKey("appId")) {
				appId = (String)initOpts.get("appId");
			}

			if (initOpts.containsKey("clientKey")) {
				clientKey = (String)initOpts.get("clientKey");
			}

			// Invoke the Parse SDK Initialize method
			parseSingleton.InitializeParse(appId, clientKey);
		}
	}

	@Kroll.method
	public void findObjects(String className, HashMap[] conditions, final KrollFunction applicationCallback) {
		FindCallback<ParseObject> parseCallback = new FindCallback<ParseObject>() {
			public void done(List<ParseObject> objects, ParseException e) {

				// General hash map to invoke the Titanium method with
				HashMap returnMap = new HashMap();
				HashMap[] resultObjects = new HashMap[objects.size()];

				if (e == null) {
					int count = 0;
					for (ParseObject po : objects) {
						// Convert each object to a hash map to retain it's key/value properties
						HashMap objectMap = parseSingleton.ConvertPOToHashMap(po);
						resultObjects[count] = objectMap;
						++count;
					}

					returnMap.put("results", resultObjects);
				}
				else {
					returnMap.put("error", e.toString());
				}

				applicationCallback.callAsync(getKrollObject(), returnMap);
			}
		};

		parseSingleton.FindDataObjects(className, conditions, parseCallback);
	}

	@Kroll.method
	public void createObject(String className, final HashMap data, final KrollFunction applicationCallback) {

		SaveCallback parseCallback = new SaveCallback() {
			public void done(ParseException e) {
				HashMap result = new HashMap();

				if (e == null) {
					result.put("object", data);
				} else {
					// There was an error
					result.put("error", e.toString());
				}

				if (applicationCallback != null) {
					applicationCallback.callAsync(getKrollObject(), result);
				}
			}
		};

		parseSingleton.CreateDataObject(className, data, parseCallback);
	}

	@Kroll.method
	public void updateObject(final HashMap data, final KrollFunction applicationCallback) {
		final ParseObject convertedObject = (ParseObject)parseSingleton.ConvertToParseObjectIfNecessary(data);
		SaveCallback parseCallback = new SaveCallback() {
			public void done(ParseException e) {
				HashMap result = new HashMap();
				HashMap returnObject = parseSingleton.ConvertPOToHashMap(convertedObject);
				if (e == null) {
					result.put("object", returnObject);
				} else {
					// There was an error
					result.put("error", e.toString());
				}

				if (applicationCallback != null) {
					applicationCallback.callAsync(getKrollObject(), result);
				}
			}
		};

		parseSingleton.UpdateDataObject(convertedObject, parseCallback);
	}

	@Kroll.method
	public void deleteObject(String className, String objectId, final KrollFunction applicationCallback) {
		DeleteCallback parseCallback = new DeleteCallback() {
			public void done(ParseException e) {
				HashMap result = new HashMap();
				if (e == null) {
					result.put("success", true);
				} else {
					result.put("error", e.toString());
				}

				applicationCallback.callAsync(getKrollObject(), result);
			}
		};

		parseSingleton.DeleteDataObject(className, objectId, parseCallback);
	}
}
